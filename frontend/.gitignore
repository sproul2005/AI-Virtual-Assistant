# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

import React, { useRef, useState } from 'react'
import axios from 'axios';
import { useContext } from 'react'
import { useNavigate } from 'react-router-dom'
import { userDataContext } from '../context/UserContext'
import { useEffect } from 'react'

const Home = () => {
  const navigate = useNavigate()
  const { userData,serverUrl,setUserData ,getGeminiResponse} = useContext(userDataContext)
  const [listening,setListening]=useState(false)
  const isSpeakingRef=useRef(false)

  const recognitionRef=useRef(null)
  const synth= window.speechSynthesis

  const handleLogout=async()=>{
    try{
      const result=await axios.get(`${serverUrl}/api/auth/logout`,
        {withCredentials:true})
        setUserData(null)
        navigate("/signin")
    } catch(error){
      setUserData(null)
      console.log(error)
    }
  }

  const startRecognition=()=>{
    try{
        recognitionRef.current?.start();
        setListening(true);
    } catch(error){
      if(!error.message.includes("start")){
        console.log("Recognition error:",error);
      }
    }
  };

   const speak = (text) => {
   const utterance = new SpeechSynthesisUtterance(text);
    
   isSpeakingRef.current=true
   utterance.onend=()=>{
    isSpeakingRef.current=false
    startRecognition()
   }
    synth.speak(utterance);
   }
  
   const handlerCommand=(data)=>{
    const {type,userInput,response}=data
    speak(response);

    if(type === 'google-search'){
      const query=encodeURIComponent(userInput);
      window.open(`https://www.google.com/search?q=${query}`,
        '_blank');
    }

    if(type === 'calculator-open'){
      window.open(`https://www.google.com/search?q=calculator`,'_blank');
    }

    if(type === "instagram-open"){
      window.open(`https://www.instagram.com/`,'_blank');
    }
    if(type === "facebook-open"){
      window.open(`https://www.facebook.com/`, '_blank');
    }
    if(type === "weather-show"){
      window.open(`https://www.google.com/search?q=weather`, '_blank');
    }
      if(type === 'youtube-search' || type === 'youtube-play'){
      const query=encodeURIComponent(userInput);
      window.open(`https://www.youtube.com/results?search_query=${query}`,
        '_blank');
    }

   }

  useEffect(()=>{
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition

    const recognition=new SpeechRecognition()
    recognition.continuous=true,
    recognition.lang='en-US'

    recognitionRef.current=recognition
    const isRecognizingRef={current:false}
   

    const safeRecognition=()=>{
      
      if(!isSpeakingRef.current && !isRecognizingRef.current){
        try{
              recognition.start();
              console.log("Recognition requested to start");
        } catch(err){
          if(err.name !== "InvalidStateError"){
            console.log("Start error:", err)
          }
        }
      }
    };
  

    recognition.onstart=()=>{
      console.log("Recognition started");
      isRecognizingRef.current=true;
      setListening(true)
    };
    recognition.onend=()=>{
      console.log("Recognition ended");
      isRecognizingRef.current=false;
      setListening(false);

      if(!isSpeakingRef.current){
        setTimeout(()=>{
          safeRecognition()
        },1500);
      }
    };


    recognition.onerror=(event)=>{
      console.warn("Recognition error:", event.error);
      isRecognizingRef.current=false;
      setListening(false);
      if(event.error !== "aborted" && !isSpeakingRef.current){
        setTimeout(()=>{
          safeRecognition();
        },1000);
      }
    }

    recognition.onresult= async (e)=>{
       const transcript=e.results[e.results.length -1][0].transcript.trim();
       console.log("heard : "+transcript)

       if(transcript.toLowerCase().includes(userData.assistantName.toLowerCase())){
        // recognition.stop()
        isRecognizingRef.current=false
        setListening(false)
        const data= await getGeminiResponse(transcript)
        handlerCommand(data)
       }
    };


    const fallback=setInterval(()=>{
      if(!isSpeakingRef.current && !isRecognizingRef.current){
        safeRecognition()
      }
    },5000);
    safeRecognition()
    return ()=>{
      recognition.stop()
      setListening(false)
      isRecognizingRef.current=false
      clearInterval(fallback)
    };
  },[]);



  return (
    <div className="relative flex flex-col items-center justify-center h-screen bg-gradient-to-t from-black to-[#02023d] text-white p-8">

      {/* Top-right controls */}
 <div className="absolute top-5 right-5 flex flex-col items-end gap-3">
  <button
    className="w-[160px] h-[45px] text-black font-semibold bg-white rounded-full text-[18px] cursor-pointer" onClick={handleLogout}
  >
    Logout
  </button>
  <button
    className="w-[160px] px-4 py-2 bg-cyan-500 font-semibold rounded-full hover:bg-cyan-600 transition text-white text-sm cursor-pointer"
    onClick={() => navigate('/customize')}
  >
    Customize Assistant
  </button>
  <button
    className="w-[160px] px-4 py-2 bg-purple-500 font-semibold rounded-full hover:bg-purple-600 transition text-white text-sm cursor-pointer"
    onClick={() => navigate('/customize2')}
  >
    Advanced Customization
  </button>
</div>


      {/* Center content */}
      <h1 className="text-4xl font-bold mb-3 text-center">
        ðŸ‘‹Welcome to Your Assistant Dashboard
      </h1>
      <p className="mb-4 text-center font-semibold">ðŸ¤– Your AI Assistant is Ready ðŸš€</p>

      <div className="w-[300px] h-[400px] flex justify-center items-center overflow-hidden rounded-4xl shadow-lg mb-3">
        <img src={userData?.assistantImage} alt="" className="h-full object-cover" />
      </div>
      <h1 className="text-white text-[18px] font-semibold mb-[50px] p-[5px]">I'm  
      <span> {userData?.assistantName}</span>
      </h1>
    </div>
  )
}

export default Home